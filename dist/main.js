/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ArchmagePlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// statblockrenderer.ts
var import_obsidian = __toModule(require("obsidian"));
var StatblockRenderer = class extends import_obsidian.MarkdownRenderChild {
  constructor(containerEl, context, params) {
    super(containerEl);
    this.params = params;
    __publicField(this, "statblockEl");
    this.statblockEl = this.containerEl.createDiv({ cls: "statblock-tor2e" });
    this.statblockEl.createEl("h2", { cls: "nomargin em", text: params.name });
    if (params.blurb !== void 0 || params.description !== void 0) {
      import_obsidian.MarkdownRenderer.renderMarkdown(params.blurb || params.description, this.statblockEl, context, this);
    }
    const topSectionEl = this.statblockEl.createEl("section");
    if (params.level !== void 0) {
      const attributeEl = topSectionEl.createDiv({ cls: "fl-r lg" });
      diamond(attributeEl, "Attribute Level", params.level);
    }
    topSectionEl.createDiv({ cls: "caps bold nomargin", text: params.name });
    if (params.features !== void 0) {
      import_obsidian.MarkdownRenderer.renderMarkdown(params.features.join(", "), topSectionEl, context, this);
    }
    const statsEl = this.statblockEl.createDiv({ cls: "clear" });
    diamond(statsEl, "Endurance", params.endurance);
    diamond(statsEl, "Might", params.might);
    if (params.resolve !== void 0) {
      diamond(statsEl, "Resolve", params.resolve);
    } else if (params.hate !== void 0) {
      diamond(statsEl, "Hate", params.hate);
    } else {
      diamond(statsEl, "Hate", "&mdash;");
    }
    if (params.parry !== void 0) {
      diamond(statsEl, "Parry", bonus(params.parry));
    } else {
      diamond(statsEl, "Parry", "&mdash;");
    }
    if (params.armour !== void 0) {
      diamond(statsEl, "Armour", params.armour);
    } else if (params.armor !== void 0) {
      diamond(statsEl, "Armour", params.armor);
    } else {
      diamond(statsEl, "Armour", "&mdash;");
    }
    if (params.proficiencies) {
      const profsEl = this.statblockEl.createEl("section", { cls: "clear" });
      profsEl.createEl("p", { cls: "caps bold nomargin", text: "Combat Proficiencies" });
      for (let i = 0; i < params.proficiencies.length; i++) {
        const prof = params.proficiencies[i];
        const profStr = `${prof.name} ${prof.rating} (${prof.damage}/${prof.injury}, ${prof.special})`;
        import_obsidian.MarkdownRenderer.renderMarkdown(profStr, profsEl, context, this);
      }
    }
    if (params.abilities) {
      const abilitiesEl = this.statblockEl.createEl("section", { cls: "clear" });
      abilitiesEl.createEl("p", { cls: "caps bold nomargin", text: "Fell Abilities" });
      for (let i = 0; i < params.abilities.length; i++) {
        import_obsidian.MarkdownRenderer.renderMarkdown(params.abilities[i], abilitiesEl, context, this);
      }
    }
  }
};
function bonus(stat) {
  if (stat === 0)
    return stat.toString();
  return stat > 0 ? `+${stat}` : `${stat}`;
}
function diamond(containerEl, label, text) {
  const diamondContainerEl = containerEl.createDiv({ cls: "attr-diamond-container" });
  diamondContainerEl.createDiv({ cls: "sc accent bold attr-diamond-label", text: label });
  const diamond2 = diamondContainerEl.createDiv({ cls: "attr-diamond" });
  return diamond2.createDiv({ cls: "attr-diamond-text bold accent", text });
}

// main.ts
var ArchmagePlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerMarkdownCodeBlockProcessor("tor2e", this.processMarkdown.bind(this));
    });
  }
  processMarkdown(source, el, ctx) {
    return __async(this, null, function* () {
      const yaml = (0, import_obsidian2.parseYaml)(source);
      let renderData = __spreadValues({}, yaml);
      ctx.addChild(new StatblockRenderer(el, ctx.sourcePath, renderData));
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzdGF0YmxvY2tyZW5kZXJlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcbiAgICBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuICAgIHBhcnNlWWFtbCxcbiAgICBQbHVnaW4sXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgU3RhdGJsb2NrUmVuZGVyZXIgfSBmcm9tIFwic3RhdGJsb2NrcmVuZGVyZXJcIjtcblxuLy8gY29uc3Qgc3JkRGF0YSA9IHJlcXVpcmUoXCJkYXRhLmpzb25cIik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyY2htYWdlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcbiAgICAgICAgICAgIFwidG9yMmVcIixcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc01hcmtkb3duLmJpbmQodGhpcylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBwcm9jZXNzTWFya2Rvd24oXG4gICAgICAgIHNvdXJjZTogc3RyaW5nLFxuICAgICAgICBlbDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dFxuICAgICk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHlhbWwgPSBwYXJzZVlhbWwoc291cmNlKTtcbiAgICAgICAgbGV0IHJlbmRlckRhdGEgPSB7IC4uLnlhbWwgfTtcblxuICAgICAgICAvLyBpZiAoeWFtbC5tb25zdGVyKSB7XG4gICAgICAgIC8vIFx0Y29uc3QgbG9va3VwTW9uc3RlciA9IHNyZERhdGEuZmluZCgoeCkgPT4geC5uYW1lID09PSB5YW1sLm1vbnN0ZXIpO1xuICAgICAgICAvLyBcdGlmIChsb29rdXBNb25zdGVyKSB7XG4gICAgICAgIC8vIFx0XHRyZW5kZXJEYXRhID0geyAuLi5sb29rdXBNb25zdGVyLCAuLi55YW1sIH07XG4gICAgICAgIC8vIFx0fVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gREVCVUc6IFVuY29tbWVudCBoZXJlIHRvIG91dHB1dCB0aGUgcGFyc2VkIFlBTUxcbiAgICAgICAgLy8gY29uc29sZS5sb2coc291cmNlKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyh5YW1sKVxuXG4gICAgICAgIGN0eC5hZGRDaGlsZChuZXcgU3RhdGJsb2NrUmVuZGVyZXIoZWwsIGN0eC5zb3VyY2VQYXRoLCByZW5kZXJEYXRhKSk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7fVxufVxuIiwgImltcG9ydCB7IE1hcmtkb3duUmVuZGVyQ2hpbGQsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGNsYXNzIFN0YXRibG9ja1JlbmRlcmVyIGV4dGVuZHMgTWFya2Rvd25SZW5kZXJDaGlsZCB7XG4gICAgc3RhdGJsb2NrRWw6IEhUTUxEaXZFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBjb250ZXh0OiBzdHJpbmcsIHByaXZhdGUgcGFyYW1zOiBhbnkpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyRWwpO1xuXG4gICAgICAgIHRoaXMuc3RhdGJsb2NrRWwgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogXCJzdGF0YmxvY2stdG9yMmVcIiB9KTtcblxuICAgICAgICAvLyB0aGlzLnN0YXRibG9ja0VsLmNyZWF0ZURpdih7IGNsczogXCJmbC1yIGVtXCIsIHRleHQ6IHBhcmFtcy5zb3VyY2UgfSk7XG4gICAgICAgIHRoaXMuc3RhdGJsb2NrRWwuY3JlYXRlRWwoXCJoMlwiLCB7IGNsczogXCJub21hcmdpbiBlbVwiLCB0ZXh0OiBwYXJhbXMubmFtZSB9KTtcblxuICAgICAgICBpZiAocGFyYW1zLmJsdXJiICE9PSB1bmRlZmluZWQgfHwgcGFyYW1zLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24ocGFyYW1zLmJsdXJiIHx8IHBhcmFtcy5kZXNjcmlwdGlvbiwgdGhpcy5zdGF0YmxvY2tFbCwgY29udGV4dCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOYW1lLCBGZWF0dXJlcywgQXR0cmlidXRlIExldmVsXG4gICAgICAgIGNvbnN0IHRvcFNlY3Rpb25FbCA9IHRoaXMuc3RhdGJsb2NrRWwuY3JlYXRlRWwoXCJzZWN0aW9uXCIpO1xuICAgICAgICBpZiAocGFyYW1zLmxldmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZUVsID0gdG9wU2VjdGlvbkVsLmNyZWF0ZURpdih7IGNsczogXCJmbC1yIGxnXCIgfSk7XG4gICAgICAgICAgICBkaWFtb25kKGF0dHJpYnV0ZUVsLCBcIkF0dHJpYnV0ZSBMZXZlbFwiLCBwYXJhbXMubGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHRvcFNlY3Rpb25FbC5jcmVhdGVEaXYoeyBjbHM6IFwiY2FwcyBib2xkIG5vbWFyZ2luXCIsIHRleHQ6IHBhcmFtcy5uYW1lIH0pO1xuXG4gICAgICAgIGlmIChwYXJhbXMuZmVhdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24ocGFyYW1zLmZlYXR1cmVzLmpvaW4oXCIsIFwiKSwgdG9wU2VjdGlvbkVsLCBjb250ZXh0LCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXRzXG4gICAgICAgIGNvbnN0IHN0YXRzRWwgPSB0aGlzLnN0YXRibG9ja0VsLmNyZWF0ZURpdih7IGNsczogJ2NsZWFyJyB9KTtcbiAgICAgICAgZGlhbW9uZChzdGF0c0VsLCBcIkVuZHVyYW5jZVwiLCBwYXJhbXMuZW5kdXJhbmNlKTtcbiAgICAgICAgZGlhbW9uZChzdGF0c0VsLCBcIk1pZ2h0XCIsIHBhcmFtcy5taWdodCk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5yZXNvbHZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRpYW1vbmQoc3RhdHNFbCwgXCJSZXNvbHZlXCIsIHBhcmFtcy5yZXNvbHZlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuaGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkaWFtb25kKHN0YXRzRWwsIFwiSGF0ZVwiLCBwYXJhbXMuaGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFtb25kKHN0YXRzRWwsIFwiSGF0ZVwiLCBcIiZtZGFzaDtcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnBhcnJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRpYW1vbmQoc3RhdHNFbCwgXCJQYXJyeVwiLCBib251cyhwYXJhbXMucGFycnkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpYW1vbmQoc3RhdHNFbCwgXCJQYXJyeVwiLCBcIiZtZGFzaDtcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmFybW91ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkaWFtb25kKHN0YXRzRWwsIFwiQXJtb3VyXCIsIHBhcmFtcy5hcm1vdXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5hcm1vciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkaWFtb25kKHN0YXRzRWwsIFwiQXJtb3VyXCIsIHBhcmFtcy5hcm1vcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFtb25kKHN0YXRzRWwsIFwiQXJtb3VyXCIsIFwiJm1kYXNoO1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbWJhdCBQcm9maWNpZW5jaWVzXG4gICAgICAgIGlmIChwYXJhbXMucHJvZmljaWVuY2llcykge1xuICAgICAgICAgICAgY29uc3QgcHJvZnNFbCA9IHRoaXMuc3RhdGJsb2NrRWwuY3JlYXRlRWwoXCJzZWN0aW9uXCIsIHsgY2xzOiAnY2xlYXInIH0pO1xuICAgICAgICAgICAgcHJvZnNFbC5jcmVhdGVFbChcInBcIiwgeyBjbHM6IFwiY2FwcyBib2xkIG5vbWFyZ2luXCIsIHRleHQ6IFwiQ29tYmF0IFByb2ZpY2llbmNpZXNcIiB9KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLnByb2ZpY2llbmNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9mID0gcGFyYW1zLnByb2ZpY2llbmNpZXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZlN0ciA9IGAke3Byb2YubmFtZX0gJHtwcm9mLnJhdGluZ30gKCR7cHJvZi5kYW1hZ2V9LyR7cHJvZi5pbmp1cnl9LCAke3Byb2Yuc3BlY2lhbH0pYDtcbiAgICAgICAgICAgICAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKHByb2ZTdHIsIHByb2ZzRWwsIGNvbnRleHQsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmVsbCBBYmlsaXRpZXNcbiAgICAgICAgaWYgKHBhcmFtcy5hYmlsaXRpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFiaWxpdGllc0VsID0gdGhpcy5zdGF0YmxvY2tFbC5jcmVhdGVFbChcInNlY3Rpb25cIiwgeyBjbHM6ICdjbGVhcicgfSk7XG4gICAgICAgICAgICBhYmlsaXRpZXNFbC5jcmVhdGVFbChcInBcIiwgeyBjbHM6IFwiY2FwcyBib2xkIG5vbWFyZ2luXCIsIHRleHQ6IFwiRmVsbCBBYmlsaXRpZXNcIiB9KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLmFiaWxpdGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24ocGFyYW1zLmFiaWxpdGllc1tpXSwgYWJpbGl0aWVzRWwsIGNvbnRleHQsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBib251cyhzdGF0OiBudW1iZXIgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChzdGF0ID09PSAwKSByZXR1cm4gc3RhdC50b1N0cmluZygpO1xuICAgIHJldHVybiBzdGF0ID4gMCA/IGArJHtzdGF0fWAgOiBgJHtzdGF0fWA7XG59XG5cbmZ1bmN0aW9uIGRpYW1vbmQoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBsYWJlbDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICBjb25zdCBkaWFtb25kQ29udGFpbmVyRWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6IFwiYXR0ci1kaWFtb25kLWNvbnRhaW5lclwiIH0pO1xuICAgIGRpYW1vbmRDb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6IFwic2MgYWNjZW50IGJvbGQgYXR0ci1kaWFtb25kLWxhYmVsXCIsIHRleHQ6IGxhYmVsIH0pO1xuICAgIGNvbnN0IGRpYW1vbmQgPSBkaWFtb25kQ29udGFpbmVyRWwuY3JlYXRlRGl2KHtjbHM6IFwiYXR0ci1kaWFtb25kXCJ9KTtcbiAgICByZXR1cm4gZGlhbW9uZC5jcmVhdGVEaXYoe2NsczogXCJhdHRyLWRpYW1vbmQtdGV4dCBib2xkIGFjY2VudFwiLCB0ZXh0OiB0ZXh0IH0pO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFJTzs7O0FDSlAsc0JBQXNEO0FBRS9DLHNDQUFnQyxvQ0FBb0I7QUFBQSxFQUd2RCxZQUFZLGFBQTBCLFNBQXlCLFFBQWE7QUFDeEUsVUFBTTtBQURxRDtBQUYvRDtBQUtJLFNBQUssY0FBYyxLQUFLLFlBQVksVUFBVSxFQUFFLEtBQUs7QUFH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
