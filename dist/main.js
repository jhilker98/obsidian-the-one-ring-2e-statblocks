/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ArchmagePlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// statblockrenderer.ts
var import_obsidian = __toModule(require("obsidian"));
var StatblockRenderer = class extends import_obsidian.MarkdownRenderChild {
  constructor(containerEl, context, params) {
    super(containerEl);
    this.params = params;
    __publicField(this, "statblockEl");
    this.statblockEl = this.containerEl.createDiv({ cls: "statblock-tor2e" });
    this.statblockEl.createEl("h2", { cls: "nomargin em", text: params.name });
    if (params.blurb !== void 0 || params.description !== void 0) {
      import_obsidian.MarkdownRenderer.renderMarkdown(params.blurb || params.description, this.statblockEl, context, this);
    }
    const topSectionEl = this.statblockEl.createEl("section");
    if (params.level !== void 0) {
      const attributeEl = topSectionEl.createDiv({ cls: "fl-r lg" });
      diamond(attributeEl, "Attribute Level", params.level);
    }
    topSectionEl.createDiv({ cls: "caps bold nomargin", text: params.name });
    if (params.features !== void 0) {
      import_obsidian.MarkdownRenderer.renderMarkdown(params.features.join(", "), topSectionEl, context, this);
    }
    const statsEl = this.statblockEl.createDiv({ cls: "clear" });
    diamond(statsEl, "Endurance", params.endurance);
    diamond(statsEl, "Might", params.might);
    if (params.resolve !== void 0) {
      diamond(statsEl, "Resolve", params.resolve);
    } else if (params.hate !== void 0) {
      diamond(statsEl, "Hate", params.hate);
    } else {
      diamond(statsEl, "Hate", "&mdash;");
    }
    if (params.parry !== void 0) {
      diamond(statsEl, "Parry", bonus(params.parry));
    } else {
      diamond(statsEl, "Parry", "&mdash;");
    }
    if (params.armour !== void 0) {
      diamond(statsEl, "Armour", params.armour);
    } else if (params.armor !== void 0) {
      diamond(statsEl, "Armour", params.armor);
    } else {
      diamond(statsEl, "Armour", "&mdash;");
    }
    if (params.proficiencies) {
      const profsEl = this.statblockEl.createEl("section", { cls: "clear" });
      profsEl.createEl("p", { cls: "caps bold nomargin", text: "Combat Proficiencies" });
      for (let i = 0; i < params.proficiencies.length; i++) {
        const prof = params.proficiencies[i];
        const profStr = `${prof.name} ${prof.rating} (${prof.damage}/${prof.injury}, ${prof.special})`;
        import_obsidian.MarkdownRenderer.renderMarkdown(profStr, profsEl, context, this);
      }
    }
    if (params.abilities) {
      const abilitiesEl = this.statblockEl.createEl("section", { cls: "clear" });
      abilitiesEl.createEl("p", { cls: "caps bold nomargin", text: "Fell Abilities" });
      for (let i = 0; i < params.abilities.length; i++) {
        import_obsidian.MarkdownRenderer.renderMarkdown(params.abilities[i], abilitiesEl, context, this);
      }
    }
  }
};
function bonus(stat) {
  if (stat === 0)
    return stat.toString();
  return stat > 0 ? `+${stat}` : `${stat}`;
}
function diamond(containerEl, label, text) {
  const diamondContainerEl = containerEl.createDiv({ cls: "attr-diamond-container" });
  diamondContainerEl.createDiv({ cls: "sc accent bold attr-diamond-label", text: label });
  const diamond2 = diamondContainerEl.createDiv({ cls: "attr-diamond" });
  return diamond2.createDiv({ cls: "attr-diamond-text bold accent", text });
}

// main.ts
var ArchmagePlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerMarkdownCodeBlockProcessor("tor2e", this.processMarkdown.bind(this));
    });
  }
  processMarkdown(source, el, ctx) {
    return __async(this, null, function* () {
      const yaml = (0, import_obsidian2.parseYaml)(source);
      let renderData = __spreadValues({}, yaml);
      ctx.addChild(new StatblockRenderer(el, ctx.sourcePath, renderData));
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
